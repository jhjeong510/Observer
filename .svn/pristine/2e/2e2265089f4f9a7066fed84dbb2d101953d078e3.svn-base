import React, { Component } from 'react';
import axios from 'axios';
import EventTypeItem from './EventTypeItem';
import { Col, Row, Nav, Tab } from 'react-bootstrap';

class EventTypeSetting extends Component {

	state = {
		selectctlEvents: [],
		ebellEvents: [],
		observerEvents: [],
		accessctlEvents: [],
		ndoctorEvents: []
	}

	handleGetEventTypes = async (service_type) => {

		try {
			const result = await axios.get(`/api/observer/eventType?service_type=${service_type}`);
			if(result && result.data.result && result.data.result.rows.length > 0)	{
				if(service_type === 'selectctl') {
					this.setState({ selectctlEvents: result.data.result.rows})
				} else if(service_type === 'ebell') {
					this.setState({ ebellEvents: result.data.result.rows })
				} else if(service_type === 'observer') {
					this.setState({ observerEvents: result.data.result.rows });
				} else if(service_type === 'accesscontrol') {
					this.setState({ accessctlEvents: result.data.result.rows });
				} else if(service_type === 'ndoctor') {
					this.setState({ ndoctorEvents: result.data.result.rows });
				}
			}
		} catch(err) {
			console.log('Get EventTypes Err: ', err);
		}
	}

	handleSetEventType = async (target, idx, value2, service_type) => {

		try {
			let result;
			if(target === 'severity') {
				result = await axios.put('/api/observer/eventType', {
					idx: idx,
					severity: value2,
					service_type: service_type
				})
			} else if(target === 'unused') {
				result = await axios.put('/api/observer/eventType', {
					idx: idx,
					unused: value2,
					service_type: service_type
				})
			} else if(target === 'display') {
				result = await axios.put('/api/observer/eventType', {
					idx: idx,
					display: value2,
					service_type: service_type
				})
			} else if(target === 'popup') {
				result = await axios.put('/api/observer/eventType', {
					idx: idx,
					popup: value2,
					service_type: service_type
				})
			}
			if(result && result.data && result.data.result && result.data.result.rowCount > 0) {
				this.handleGetEventTypes(service_type);
			}
		} catch(err) {
			console.log('Set EventType Err: ', err);
		}
	}

	componentDidMount()	{
		this.handleGetEventTypes('selectctl');
		this.handleGetEventTypes('ebell');
		this.handleGetEventTypes('observer');
		this.handleGetEventTypes('accesscontrol');
		this.handleGetEventTypes('ndoctor');
	}

	render () {
		return (
			<div className='eventType-Setting'>
				<div className="tab-vertical">
					<Tab.Container id="left-tabs-example" defaultActiveKey="selectctl">
						<Row className='eventType-tab'>
							<Col sm={4} className='service_type'>
								<Nav variant="tabs" className="flex-column nav-tabs-vertical">
									<Nav.Item>
										<Nav.Link eventKey="selectctl">
											선별관제
										</Nav.Link>
									</Nav.Item>
									<Nav.Item>
										<Nav.Link eventKey="ebell">
											비상벨
										</Nav.Link>
									</Nav.Item>
									<Nav.Item>
										<Nav.Link eventKey="observer">
											옵저버
										</Nav.Link>
									</Nav.Item>
									<Nav.Item>
										<Nav.Link eventKey="accesscontrol">
											출입통제
										</Nav.Link>
									</Nav.Item>
									{
										this.props.serviceTypes && this.props.serviceTypes.find((serviceType) => serviceType.name === 'ndoctor' && serviceType.setting_value === 'true')?
										<Nav.Item>
											<Nav.Link eventKey="ndoctor">
												N-Doctor
											</Nav.Link>
										</Nav.Item>
										:
										''
									}
								</Nav>
							</Col>
							<Col sm={8} className="eventType-items">
								<Tab.Content className="tab-content-vertical">
									<Tab.Pane eventKey="selectctl">
										{
											this.state.selectctlEvents.map((event, index) => {
												return (
														<EventTypeItem
															key={index}
															eventTypeItemInfo={event}
															handleSetEventType={this.handleSetEventType}
													/>
													
												)
											})
										}
									</Tab.Pane>
									<Tab.Pane eventKey="ebell">
										{
											this.state.ebellEvents.map((event, index) => {
												return (
													<EventTypeItem
														key={index}
														eventTypeItemInfo={event}
														handleSetEventType={this.handleSetEventType}
													/>
												)
											})
										}
									</Tab.Pane>
									<Tab.Pane eventKey="observer">
										{
											this.state.observerEvents.map((event, index) => {
												return (
													<EventTypeItem
														key={index}
														eventTypeItemInfo={event}
														handleSetEventType={this.handleSetEventType}
													/>
												)
											})
										}
									</Tab.Pane>
									<Tab.Pane eventKey="accesscontrol">
										{
											this.state.accessctlEvents.map((event, index) => {
												return (
													<EventTypeItem
														key={index}
														eventTypeItemInfo={event}
														handleSetEventType={this.handleSetEventType}
													/>
												)
											})
										}
									</Tab.Pane>
									{
										this.props.serviceTypes && this.props.serviceTypes.find((serviceType) => serviceType.name === 'ndoctor' && serviceType.setting_value === 'true')?
										<Tab.Pane eventKey="ndoctor">
											{
												this.state.ndoctorEvents.map((event ,index) => {
													return (
														<EventTypeItem
															key={index}
															eventTypeItemInfo={event}
															handleSetEventType={this.handleSetEventType}
														/>
													)
												})
											}
										</Tab.Pane>
										:
										''
									}
								</Tab.Content>
							</Col>
						</Row>
					</Tab.Container>
				</div>
			</div>
		)
	}
}

export default EventTypeSetting;