import React, { useEffect, useState, useRef } from 'react';
import styles from './DevicePopUpModal.module.css';
import noCamera from '../../../assets/images/without_camera.png';
import { Line } from 'react-chartjs-2';

export default function DevicePopUpModal({ deviceInfo: { popUpType, position, clientHeight, clientWidth, deviceId, cameraId, deviceName, cameraName, ipaddress, buildingName, floorName, location, type, serviceType, indication_line }, handleCloseDevicePopUp, socketClient, handleDisconnectLiveStream, liveStream, handleSetLiveStream, deviceList, cameraList, breathData, breathSocketClient, dataArr, xGraphTime, beforeBreathDataArr }) {
  const [receivedData, setReceivedData] = useState('');
  const [receivedCamera, setReceivedCamera] = useState('');
  const [noLiveStream, setNoLiveStream] = useState(false);
  const [withCamera, setWithCamera] = useState(false);
  const [failStream, setFailStream] = useState(false);
  const isMountedRef = useRef(null);

  const handleLiveStream = async () => {
    let isEmptySocket = true;
    if (failStream) {
      await setFailStream(false)
    }
    setTimeout(() => {
      receivedData === '' && isMountedRef && isMountedRef.current && setFailStream(true);
    }, 15000);
    const socket = socketClient;
    if (socket && cameraId) {
      if (liveStream && liveStream.received && liveStream.cameraId) {
        if (parseInt(liveStream.cameraId) !== parseInt(cameraId)) {
          isEmptySocket = false;
          const isDisconnected = await handleDisconnectLiveStream();
          isEmptySocket = isDisconnected;
        }
      }
      if (isEmptySocket) {
        isMountedRef.current && await setReceivedCamera(cameraId);
        await socket.emit('cameraStream', {
          cameraId,
          cmd: 'on'
        });
        await socket.on('cameraStream', (received) => {
          if (received && received.cameraId === cameraId) {
            isMountedRef.current && setReceivedData(received.data);
          }
        })
      }
    }
  }

  const handleShowWithCamera = async () => {
    if (isMountedRef.current) {
      setWithCamera(true);
      setNoLiveStream(false);
      handleLiveStream();
    }
  }

  const breathGraph = () => {
    let data = dataArr;
    const options = {
      responsive: true,
      scales: {
        yAxes: [{
          ticks: {
            min: 0,
            stepSize: 100,
          }
        }]
      },
    };
    return (
      <Line data={data} options={options} />
    );
  }

  useEffect(() => {
    isMountedRef.current = true;
    if (isMountedRef.current && (popUpType === 'optionCamera' || popUpType === 'optionCamera_vital' || popUpType === 'onlyDevice')) {
      withCamera && setWithCamera(false);
      handleDisconnectLiveStream();
      setNoLiveStream(true);
      setReceivedCamera('');
    } else if (isMountedRef.current && popUpType !== 'optionCamera' && popUpType !== 'optionCamera_vital' && popUpType !== 'onlyDevice' && popUpType !== 'onlyCamera' && cameraId !== receivedCamera) {
      setNoLiveStream(false);
      handleLiveStream();
    } else if (isMountedRef.current && popUpType === 'onlyCamera') {
      withCamera && setWithCamera(false);
      handleLiveStream();
      noLiveStream && setNoLiveStream(false);
    }
    return () => {
      isMountedRef.current = false;
    }
  }, [popUpType, ipaddress, cameraId, deviceList, cameraList]);

  useEffect(() => {
    isMountedRef.current = true;
    if (isMountedRef.current && !cameraId) {
      handleDisconnectLiveStream();
      setFailStream(true);
      setReceivedData('');
    }
    isMountedRef.current && cameraId && handleSetLiveStream({ cameraId, received: true });
    return () => {
      isMountedRef.current = false;
      handleDisconnectLiveStream();
    }
  }, [cameraId]);

  if (position) {
    return (
      <div className={(popUpType === 'optionCamera' || popUpType === 'optionCamera_vital') ? withCamera ? popUpType === 'optionCamera' ? styles.root_full : styles.root_full_vital : popUpType === 'optionCamera' ? styles.root : styles.root_vital : popUpType === 'onlyCamera' ? styles.root_camera : ''} style={{ top: position.y + (withCamera && ((indication_line === 'top' || indication_line === 'left_top') || (position.y + (clientHeight * 0.28339525) >= clientHeight)) && -(clientHeight * 0.2064)) + 'px', left: position.x + 'px' }}>
        <header>
          <a href='!#' className={styles.close} onClick={handleCloseDevicePopUp} />
          <span className={indication_line === 'left' && !(withCamera && (position.y + (clientHeight * 0.28339525) >= clientHeight)) ? styles.indication_line_left : (indication_line === 'top' || (!(indication_line === 'left') && withCamera && (position.y + (clientHeight * 0.28339525)) >= clientHeight)) ? styles.indication_line_top : (indication_line === 'left_top' || ((indication_line === 'left') && withCamera && (position.y + (clientHeight * 0.28339525) >= clientHeight))) ? styles.indication_line_left_top : styles.indication_line_default}></span>
        </header>
        <div className={styles.body}>
          {popUpType !== 'onlyCamera' &&
            <div className={styles.info}>
              <span className={styles.info_detail}>{ipaddress}</span>
              {/* {buildingName || floorName || location && <span>{buildingName ? buildingName : ''} {floorName ? floorName : ''} {location ? location : ''}</span>} */}
              <div className={styles.info_detail_location}>
                {buildingName && <span>{buildingName ? buildingName : ''}</span>}
                {floorName && <span>{floorName ? floorName : ''}</span>}
                {location && <span>{location ? location : ''}</span>}
              </div>
              {cameraId && <span className={styles.info_detail_cc} onClick={handleShowWithCamera}><i className="mdi mdi-message-video" title={cameraId}></i></span>}
            </div>
          }
          {type === 'vitalsensor' && popUpType !== 'onlyCamera' && <div className={styles.sensor_value}>
            <span>현재 호흡 수치 : {breathData.respiration}</span>
          </div>
          }
          {!noLiveStream &&
            <div className={styles.video}>
              <img alt='' style={receivedData ? { width: '18.75rem', height: '20.64vh' } : !cameraId ? { width: '18.75rem', height: '20.64vh' } : { width: '12.5rem', height: '20.64vh' }} src={receivedData ? 'data:image/jpeg;base64,' + receivedData : !cameraId ? noCamera : !failStream ? require('../../../assets/images/loading.gif') : ''} autoPlay></img>
            </div>
          }
          {type === 'vitalsensor' && popUpType !== 'onlyCamera' &&
            <div className={styles.vitalsensor_chart}>
              {breathGraph()}
            </div>
          }
        </div>
      </div>
    );
  } else {
    return ''
  }
}