import React, { useState, useEffect } from 'react';
import { Modal, Button, Form } from 'react-bootstrap';
import { setScheduleGroup } from '../../dashboard/api/apiService';

export default function HandleVitalsensorScheduleModal({ show, setShow, message, title, callback, selectObject, clickPoint, inside, vitalsensorScheduleList }) {
	// const [modalWarnMessage, setModalWarnMessage] = useState('');
	// const [modalCurrentScheduleGroup, setModalCurrentScheduleGroup] = useState('');

	// const handleChangeApplySchduleGroup = (e) => {
	// 	setModalCurrentScheduleGroup(e.currentTarget.value);
	// }
	// const handleChangeStartDate = (startDate) => {
	// 	if (this.props.breathSensorList.length === 0) {
	// 		this.setState({ modalBreathWarn: '지도(도면) 상에 호흡감지센서를 등록 후 스케줄 생성이 가능합니다.' })
	// 	} else {
	// 		try {
	// 			this.setState({ startDate: startDate });
	// 			const newStartTime = dateFns.format(startDate, 'yyyyMMdd');
	// 			this.setState({
	// 				startDateForAutoValue: newStartTime,
	// 				autoStart: '',
	// 				autoEnd: '',
	// 			});
	// 		} catch (err) {
	// 			console.error('이벤트 발생 시간 선택 Error: ', err);
	// 		}
	// 	}
	// 	return
	// }


	// breathValueAutoSetting = async () => {
	// 	const ipaddress = this.state.selectedShape.ipaddress;
	// 	const startTime = this.state.startDateForAutoValue;
	// 	const endTime = this.state.startTimeForAutoValue;

	// 	const theStartTime = startTime + 'T' + endTime;
	// 	const notAddFiveMinutes = dateFns.addMinutes(this.state.startTime, 5);
	// 	const notFormattingEndTime = dateFns.format(notAddFiveMinutes, 'HHmmss');
	// 	const theEndTime = startTime + 'T' + notFormattingEndTime;

	// 	try {
	// 		if (this.state.startDateForAutoValue && this.state.startTimeForAutoValue) {
	// 			const res = await axios.put('api/observer/breaththresholdcalc', {
	// 				ipaddress,
	// 				start: theStartTime,
	// 				end: theEndTime,
	// 			})
	// 			if (res.data.result === 'ok' && res.data.threashold !== undefined && res.data.threashold !== 0) {
	// 				const temp = { ...this.state.selectedShape };
	// 				temp.breath_value = res.data.threashold;
	// 				this.setState({
	// 					autoBreathValue: res.data.threashold + '',
	// 					selectedShape: temp,
	// 					modalAutoBreathValueWarn: '',
	// 					autoStart: '',
	// 					autoEnd: '',
	// 					startDateForAutoValue: '',
	// 					startTimeForAutoValue: ''
	// 				})
	// 			} else if (res.data.threashold === 0) {
	// 				this.setState({
	// 					modalAutoBreathValueWarn: '해당 시간에 측정된 값이 존재하지 않습니다.'
	// 				})
	// 			}
	// 		} else {
	// 			if (this.state.autoStart && this.state.autoEnd) {
	// 				const res = await axios.put('api/observer/breaththresholdcalc', {
	// 					ipaddress,
	// 					start: this.state.autoStart,
	// 					end: this.state.autoEnd,
	// 				})
	// 				if (res.data.result === 'ok' && res.data.threashold !== undefined && res.data.threashold !== 0) {
	// 					const temp = { ...this.state.selectedShape };
	// 					temp.breath_value = res.data.threashold;
	// 					this.setState({
	// 						autoBreathValue: res.data.threashold + '',
	// 						selectedShape: temp,
	// 						modalAutoBreathValueWarn: '',
	// 						autoStart: '',
	// 						autoEnd: '',
	// 						startDateForAutoValue: '',
	// 						startTimeForAutoValue: ''
	// 					})
	// 				} else if (res.data.threashold === 0) {
	// 					this.setState({
	// 						modalAutoBreathValueWarn: '해당 시간에 측정된 값이 존재하지 않습니다.'
	// 					})
	// 				}
	// 			}
	// 		}
	// 	} catch (error) {
	// 		this.setState({
	// 			modalAutoBreathValueWarn: '자동으로 임계치 값을 설정할 수 없습니다.'
	// 		})
	// 		console.log('임계치 자동 설정 error', error);
	// 	}
	// }

	// const handleConfirm = () => {
	// 	// const device_type = selectObject.device_type;
	// 	// const service_type = selectObject.service_type;
	// 	const groupName = modalCurrentScheduleGroup;
	// 	const ipaddress = selectObject.data.ipaddress;
	// 	try {
	// 		setScheduleGroup({
	// 			groupName,
	// 			ipaddress
	// 		})
	// 	} catch (err) {
	// 		console.log('바이탈센서 스케줄 할당 오류: ', err);
	// 	}
	// 	handleCancel();
	// }
	// const handleCancel = () => {
	// 	setShow({ show: false });
	// 	setModalWarnMessage('');
	// 	setModalCurrentScheduleGroup('');
	// }

	return (
		<></>
		// <div className='HandleVitalsensorValueModal'>
		// 	{show ?
		// 		<Modal show={show} ohHide={handleCancel} animation={true}>
		// 			<Modal.Header>
		// 				<Modal.Title>{title}</Modal.Title>
		// 			</Modal.Header>
		// 			<Modal.Body>
		// 				<Form>
		// 					<Form.Group id="breathValue">
		// 						<Form.Label>호흡감지센서 임계치 설정</Form.Label>
		// 						<div style={{ display: 'flex' }}>
		// 							<Form.Control id={'breath-value-input'} onChange={this.handleChangeBreathValue} onKeyPress={(e) => { e.key === 'Enter' && e.preventDefault() }} />
		// 							<Button onClick={(e) => this.changeSetDbBreathValue(e, this.state.selectedShape.ipaddress)}>변경</Button>
		// 							<span className='current-breath-value'>{this.state.selectedShape && this.state.selectedShape.breath_value ? '(현재 임계치:' + this.state.selectedShape.breath_value + ')' : '(현재 임계치: )'}</span>
		// 						</div>
		// 						<Form.Text style={{ color: 'red' }}>{this.state.threshold_value_warn}</Form.Text>
		// 					</Form.Group>
		// 					<Form.Text style={{ color: 'red' }}>{this.state.modalBreathSensorBreathValueWarn}</Form.Text>
		// 				</Form>

		// 				<Form id="breathValue AutoSet">
		// 					<Form.Group>
		// 						<div style={{ marginTop: '40px' }}>
		// 							<Form.Label>호흡감지센서 자동 임계치 설정</Form.Label>

		// 							<div>
		// 								<DatePicker
		// 									selected={this.state.startDate}
		// 									onChange={(date) => this.handleChangeStartDate(date)}
		// 									selectsStart
		// 									startDate={this.state.startDateForAutoValue}
		// 									// endDate={this.state.endDate}
		// 									className="form-control report-datePicker"
		// 								/>
		// 								<DatePicker
		// 									selected={this.state.startTime}
		// 									onChange={(date) => this.handleChangeStartTime(date)}
		// 									showTimeSelect
		// 									showTimeSelectOnly
		// 									timeIntervals={1}
		// 									timeCaption="Time"
		// 									dateFormat="h:mm aa"
		// 									className="form-control report-TimePicker"
		// 								/>
		// 							</div>

		// 							<div style={{ display: 'inline-block' }}>
		// 								<p className='current-breath-value'>최대값: {this.state.maxValue ? this.state.maxValue : ''}</p>
		// 								<p className='current-breath-value'>최소값: {this.state.minValue ? this.state.minValue : ''}</p>
		// 								<p className='current-breath-value'>평균값: {this.state.avgValue ? this.state.avgValue : ''}</p>
		// 							</div>
		// 							<div>
		// 								<Button onClick={(e) => this.breathValueAutoSetting(e, this.state.selectedShape.ipaddress)}>임계치 자동 설정</Button>
		// 								<span className='current-breath-value'>{this.state.autoBreathValue && this.state.autoBreathValue.length > 0 ? '(자동 임계치 적용 값 :' + this.state.autoBreathValue + ')' : '(자동 임계치 적용 값 : )'} </span>
		// 							</div>
		// 							<Form.Text style={{ color: 'red' }}>{this.state.modalAutoBreathValueWarn}</Form.Text>
		// 						</div>
		// 					</Form.Group>
		// 				</Form>
		// 			</Modal.Body>
		// 			<Modal.Footer>
		// 				<Button variant="primary" onClick={handleConfirm}>
		// 					적용
		// 				</Button>
		// 				<Button variant="secondary" onClick={handleCancel}>
		// 					취소
		// 				</Button>
		// 			</Modal.Footer>
		// 		</Modal>
		// 		:
		// 		''
		// 	}
		// </div>
	)
}