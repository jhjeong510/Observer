export default async function ShowDevicePopUp(objectDetail, canvas, popUpType) {
  if (canvas && canvas.id === undefined) {
    const { positionX, positionY, indication_line } = await handlePosition(objectDetail, popUpType);
    if (objectDetail.target.data.type !== 'guardianlite') {
      return {
        popUpType,
        position: { x: positionX, y: positionY },
        clientHeight: objectDetail.e.target.clientHeight,
        clientWidth: objectDetail.e.target.clientWidth,
        device_id: objectDetail.target.data.device_id,
        cameraId: objectDetail.target.data.camera_id,
        deviceName: objectDetail.target.data.name,
        cameraName: objectDetail.target.data.cameraname,
        ipaddress: objectDetail.target.data.ipaddress,
        buildingName: objectDetail.target.data.buildingName,
        floorName: objectDetail.target.data.floorName,
        location: objectDetail.target.data.location,
        type: objectDetail.target.data.type,
        serviceType: objectDetail.target.data.service_type,
        indication_line
      };
    } else {
      return {
        popUpType,
        position: { x: positionX, y: positionY },
        clientHeight: objectDetail.e.target.clientHeight,
        clientWidth: objectDetail.e.target.clientWidth,
        device_id: objectDetail.target.data.device_id,
        cameraId: objectDetail.target.data.camera_id,
        deviceName: objectDetail.target.data.name,
        cameraName: objectDetail.target.data.cameraname,
        ipaddress: objectDetail.target.data.ipaddress,
        buildingName: objectDetail.target.data.buildingName,
        floorName: objectDetail.target.data.floorName,
        location: objectDetail.target.data.location,
        type: objectDetail.target.data.type,
        serviceType: objectDetail.target.data.service_type,
        indication_line,
        guardianliteInfo: {
          gl_idx: objectDetail.target.data.gl_idx,
          ch1: objectDetail.target.data.ch1,
          ch2: objectDetail.target.data.ch2,
          ch3: objectDetail.target.data.ch3,
          ch4: objectDetail.target.data.ch4,
          ch5: objectDetail.target.data.ch5,
          temper: objectDetail.target.data.temper,
          gl_id: objectDetail.target.data.gl_id,
          password: objectDetail.target.data.password
        }
      };
    }

  }
}

const handlePosition = async (objectDetail, popUpType) => {
  let positionX;
  let positionY;
  let indication_line = 'default';
  let moveLeft;
  let moveTop;
  if (objectDetail.target.data.type !== 'pids' && objectDetail.target.data.type !== 'vitalsensor' && objectDetail.target.data.type !== 'guardianlite') {
    const { left, top, width, height } = objectDetail.target;
    if (((left + width + (objectDetail.e.target.clientWidth * 0.159375)) >= objectDetail.e.target.clientWidth)) {
      positionX = (left + (width / 2) - (objectDetail.e.target.clientWidth * 0.209375));
      moveLeft = true;
    } else {
      positionX = (left + width + (objectDetail.e.target.clientWidth * 0.02));
    }
    if (popUpType === 'optionCamera') {
      if ((top + (height / 2) + (objectDetail.e.target.clientHeight * 0.1)) >= objectDetail.e.target.clientHeight) {
        positionY = (top - objectDetail.e.target.clientHeight * 0.035);
        moveTop = true;
      } else {
        positionY = (top);
      }
    } else if (popUpType === 'onlyCamera') {
      if ((top + (height / 2) + (objectDetail.e.target.clientHeight * 0.2125903)) >= objectDetail.e.target.clientHeight) {
        positionY = (top - (objectDetail.e.target.clientHeight * 0.175));
        moveTop = true;
      } else {
        positionY = (top);
      }
    }
    if (moveLeft && moveTop) {
      indication_line = 'left_top';
    } else if (moveLeft && !moveTop) {
      indication_line = 'left';
    } else if (!moveLeft && moveTop) {
      indication_line = 'top';
    }
  } else if (objectDetail.target.data.type === 'pids') {
    const { top, left, width, height, x1, x2, y1, y2 } = objectDetail.target;
    if (objectDetail.target.text_top && objectDetail.target.text_left) {
      if (((((parseFloat(x2) + parseFloat(x1)) / 2) + (objectDetail.e.target.clientWidth * 0.03) + (objectDetail.e.target.clientWidth * 0.159375)) >= objectDetail.e.target.clientWidth)) {
        positionX = (((parseFloat(x2) + parseFloat(x1)) / 2) - (objectDetail.e.target.clientWidth * 0.189375));
        moveLeft = true;
      } else {
        positionX = (((parseFloat(x2) + parseFloat(x1)) / 2) + (objectDetail.e.target.clientWidth * 0.03));
      }
      if (popUpType === 'optionCamera') {
        if ((((parseFloat(y2) + parseFloat(y1)) / 2) + (objectDetail.e.target.clientHeight * 0.1)) >= objectDetail.e.target.clientHeight) {
          positionY = (((parseFloat(y2) + parseFloat(y1)) / 2) - objectDetail.e.target.clientHeight * 0.05);
          moveTop = true;
        } else {
          positionY = ((parseFloat(y2) + parseFloat(y1)) / 2) - objectDetail.e.target.clientHeight * 0.03;
        }
      } else if (popUpType === 'onlyCamera') {
        if ((((parseFloat(y2) + parseFloat(y1)) / 2) + (objectDetail.e.target.clientHeight * 0.2125903)) >= objectDetail.e.target.clientHeight) {
          positionY = (((parseFloat(y2) + parseFloat(y1)) / 2) - (objectDetail.e.target.clientHeight * 0.19));
          moveTop = true;
        } else {
          positionY = ((parseFloat(y2) + parseFloat(y1)) / 2) - objectDetail.e.target.clientHeight * 0.03;
        }
      }
      if (moveLeft && moveTop) {
        indication_line = 'left_top';
      } else if (moveLeft && !moveTop) {
        indication_line = 'left';
      } else if (!moveLeft && moveTop) {
        indication_line = 'top';
      }
    } else {
      if (((left + width + (objectDetail.e.target.clientWidth * 0.159375)) >= objectDetail.e.target.clientWidth)) {
        positionX = (left - (objectDetail.e.target.clientWidth * 0.192375));
        moveLeft = true;
      } else {
        positionX = (left + width + (objectDetail.e.target.clientWidth * 0.03));
      }
      if (popUpType === 'optionCamera') {
        if (((top + (height / 2)) + (objectDetail.e.target.clientHeight * 0.1)) >= objectDetail.e.target.clientHeight) {
          positionY = ((top + (height / 2)) - (objectDetail.e.target.clientHeight * 0.1));
          moveTop = true;
        } else {
          positionY = ((top + (height / 2)) - (objectDetail.e.target.clientHeight * 0.03));
        }
      } else if (popUpType === 'onlyCamera') {
        if (((top + (height / 2)) + (objectDetail.e.target.clientHeight * 0.2125903)) >= objectDetail.e.target.clientHeight) {
          positionY = ((top + (height / 2)) - (objectDetail.e.target.clientHeight * 0.2125903));
          moveTop = true;
        } else {
          positionY = ((top + (height / 2)) - (objectDetail.e.target.clientHeight * 0.03));
        }
      }
      if (moveLeft && moveTop) {
        indication_line = 'left_top';
      } else if (moveLeft && !moveTop) {
        indication_line = 'left';
      } else if (!moveLeft && moveTop) {
        indication_line = 'top';
      }
    }
  } else if (objectDetail.target.data.type === 'vitalsensor') {
    const { left, top, width, height } = objectDetail.target;
    if (((left + width + (objectDetail.e.target.clientWidth * 0.159375)) >= objectDetail.e.target.clientWidth)) {
      positionX = (left + (width / 2) - (objectDetail.e.target.clientWidth * 0.209375));
      moveLeft = true;
    } else {
      positionX = (left + width + (objectDetail.e.target.clientWidth * 0.02));
    }
    if (popUpType === 'optionCamera_vital') {
      if ((top + (height / 2) + (objectDetail.e.target.clientHeight * 0.25479876)) >= objectDetail.e.target.clientHeight) {
        positionY = (top - objectDetail.e.target.clientHeight * 0.18979876);
        moveTop = true;
      } else {
        positionY = (top);
      }
    } else if (popUpType === 'onlyCamera') {
      if ((top + (height / 2) + (objectDetail.e.target.clientHeight * 0.2125903)) >= objectDetail.e.target.clientHeight) {
        positionY = (top - (objectDetail.e.target.clientHeight * 0.175));
        moveTop = true;
      } else {
        positionY = (top);
      }
    }
    if (moveLeft && moveTop) {
      indication_line = 'left_top';
    } else if (moveLeft && !moveTop) {
      indication_line = 'left';
    } else if (!moveLeft && moveTop) {
      indication_line = 'top';
    }
  } else if (objectDetail.target.data.type === 'guardianlite') {
    const { left, top, width, height } = objectDetail.target;
    if (((left + width + (objectDetail.e.target.clientWidth * 0.159375)) >= objectDetail.e.target.clientWidth)) {
      positionX = (left + (width / 2) - (objectDetail.e.target.clientWidth * 0.209375));
      moveLeft = true;
    } else {
      positionX = (left + width + (objectDetail.e.target.clientWidth * 0.02));
    }
    if ((top + (height / 2) + (objectDetail.e.target.clientHeight * 0.1)) >= objectDetail.e.target.clientHeight) {
      positionY = (top - objectDetail.e.target.clientHeight * 0.035);
      moveTop = true;
    } else {
      positionY = (top);
    }
    if (moveLeft && moveTop) {
      indication_line = 'left_top';
    } else if (moveLeft && !moveTop) {
      indication_line = 'left';
    } else if (!moveLeft && moveTop) {
      indication_line = 'top';
    }
  }
  return {
    positionX,
    positionY,
    indication_line
  }
}